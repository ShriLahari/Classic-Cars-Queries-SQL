-- POWER BI CAPSTONE PROJECT ON CLASSICMODELS SALES DATASET - SQL QUERIES(S5426)

-- product lines that contain 'Cars''
SELECT * FROM productlines 
WHERE Productline Like '%Cars'; 

-- No.of products in each product line
SELECT productLine, COUNT(productCode) as Distinct_Productlines
FROM Products
GROUP BY productLine
ORDER BY Distinct_Productlines DESC; 

-- Product lines with names
SELECT Productcode, Productline, Productname
FROM Products
ORDER By Productline;

-- distinct products sold by ClassicModels
SELECT Count(Distinct Productcode) As Distinct_Product
FROM Products;

-- orders with Total Sales(quantityOrdered * priceEach) as new column
SELECT quantityOrdered, priceEach, quantityOrdered * priceEach as Total_Sales FROM orderdetails;

-- Finding Product Name wise Total Sales
SELECT productName AS Product, FORMAT(SUM(quantityOrdered*priceEach),0) AS Sum_of_Sales
FROM Products JOIN OrderDetails
ON Products.productCode = OrderDetails.productCode
GROUP BY productName
ORDER BY productName;

-- payments year wise
-- 1)2003
SELECT FORMAT(SUM(amount),0) as sum_payments FROM Payments
WHERE YEAR(paymentDate) = 2003;

-- 2)2004
SELECT FORMAT(SUM(amount),0) as sum_payments FROM Payments
WHERE YEAR(paymentDate) = 2004;

-- 3)2005
SELECT FORMAT(SUM(amount),0) as sum_payments FROM Payments
WHERE YEAR(paymentDate) = 2005; 

-- the customers payments in decreasing order.
SELECT customerNumber, amount
FROM Payments
WHERE amount > 100000
ORDER BY amount DESC; 

-- amount paid by each customer.
SELECT customerName, SUM(amount)
FROM Payments JOIN Customers
ON Payments.customerNumber = Customers.customerNumber
GROUP BY customerName
ORDER BY SUM(amount);

-- products that appear on all orders?
SELECT * FROM Products
WHERE NOT EXISTS
(SELECT * FROM Orders
WHERE NOT EXISTS
(SELECT * FROM OrderDetails
WHERE Products.productCode = OrderDetails.productCode
AND Orders.orderNumber = OrderDetails.orderNumber)); 

-- products sold for lesser than MSRP
SELECT DISTINCT(productName), priceEach, MSRP
FROM OrderDetails JOIN Products
ON OrderDetails.productCode = Products.productCode
AND priceEach < MSRP; 

-- average time between order date and ship date for each customer ordered by the largest difference.
SELECT customerName, AVG(DATEDIFF(shippedDate,orderDate))AS diff FROM Customers JOIN Orders
ON Customers.customerNumber = Orders.customerNumber
GROUP BY customerName
ORDER BY diff DESC;

-- products that have not been sold.
SELECT productName, Products.productCode
FROM Products
WHERE NOT EXISTS (SELECT * FROM OrderDetails WHERE OrderDetails.productCode = Products.productCode); 

-- employees are there in the company
SELECT COUNT(employeeNumber)
FROM Employees;

-- total payments by date
SELECT paymentDate, SUM(amount)
FROM Payments
GROUP BY paymentDate; 

-- profit generated by each customer based on their orders
SELECT customerName, FORMAT(SUM(quantityOrdered*(priceEach-buyPrice)),0) AS Profit
FROM Customers JOIN Orders
ON Customers.customerNumber = Orders.customerNumber
JOIN OrderDetails ON Orders.orderNumber = OrderDetails.orderNumber
JOIN Products ON Products.productCode = OrderDetails.productCode
GROUP BY customerName
ORDER BY Profit DESC; 

-- profit generated by each product line, sorted by profit descending
SELECT productLine AS `Product line`, FORMAT(SUM(quantityOrdered*(priceEach -buyPrice)),0) AS Profit
FROM Products JOIN OrderDetails
ON Products.productCode = OrderDetails.productCode
GROUP BY productLine
ORDER BY SUM(quantityOrdered*(priceEach -buyPrice)) DESC;

-- average time between order date and ship date for each customer ordered by the largest difference.
SELECT customerName, AVG(DATEDIFF(shippedDate,orderDate))AS diff FROM Customers JOIN Orders
ON Customers.customerNumber = Orders.customerNumber
GROUP BY customerName
ORDER BY diff DESC;

-- the products sold in 2003 but not in 2005 as total sales decreased.
SELECT productName FROM Products
JOIN OrderDetails ON Products.productCode = OrderDetails.productCode
JOIN Orders ON Orders.orderNumber = OrderDetails.orderNumber WHERE YEAR(orderDate) = 2003
AND Products.productCode NOT IN
(SELECT Products.productCode FROM Products
JOIN OrderDetails ON Products.productCode = OrderDetails.productCode
JOIN Orders ON Orders.orderNumber = OrderDetails.orderNumber WHERE YEAR(orderDate) = 2005); 

-- customers without payments in 2005.
SELECT DISTINCT customerName as `Customer name` FROM Customers
JOIN Payments ON Customers.customerNumber = Payments.customerNumber
WHERE customerName NOT IN
(SELECT customerName FROM Customers
JOIN Payments ON Customers.customerNumber = Payments.customerNumber
WHERE YEAR(`paymentDate`) = 2005); 

-- representative for each customer.
SELECT customerName, concat(firstName," ",lastName) as Representative
FROM Customers JOIN Employees
ON Employees.employeeNumber = Customers.salesRepEmployeeNumber;

-- customers in USA
SELECT customerName FROM customers 
WHERE country like "USA";

-- top 10 countries by total sales
SELECT country, quantityOrdered*priceEach as Total_Sales FROM customers 
JOIN orders ON orders.customerNumber = customers.customerNumber
JOIN orderdetails ON orderdetails.orderNumber = orders.orderNumber
ORDER BY Total_Sales DESC
LIMIT 10;   

-- number of customers in UK,France,USA.
SELECT country, COUNT(*)as total_customers FROM Customers
WHERE country REGEXP 'UK|France|USA'
GROUP BY country
ORDER BY total_customers DESC;

-- calculating the profit margin (MSRP-buyPrice)
SELECT productLine, productVendor, (MSRP-buyPrice) AS Profit_Margin FROM products
GROUP BY productLine
ORDER BY Profit_Margin DESC;












